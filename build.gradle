buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.4.RELEASE'
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.11'
    }
}

plugins {
    id 'net.researchgate.release' version '2.4.0'
}

release {
    failOnCommitNeeded = false
    failOnPublishNeeded = false
    failOnSnapshotDependencies = false
    failOnUnversionedFiles = false
    failOnUpdateNeeded = false
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.bmuschko.docker-remote-api'

springBoot {
    mainClass = "bsa.BSAController"
}

Properties properties = new Properties()
properties.load(project.rootProject.file('gradle.properties').newDataInputStream())
def version = properties.getProperty('version')

jar {
    baseName = 'boot-bsa'
    version = version
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.6
targetCompatibility = 1.6

ext['tomcat.version'] = '8.5.16'
dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile 'org.json:json:20140107'
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('com.jayway.jsonpath:json-path')
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.0.1'
}

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

// TODO: Cambiar por el Registry a donde se van a subir las imagenes
def repository = 'lapp-dvde004:5000'

task createDockerfile(type: Dockerfile, dependsOn: build) {
    doFirst {
        copy {
            from "build/libs/${jar.baseName}-${jar.version}.jar"
            into 'build/docker/'
        }
    }
    from 'openjdk:8-jre-alpine'
    addFile "${jar.baseName}-${jar.version}.jar", "/app.jar"
    environmentVariable "JAVA_OPTS", '""'
    exposePort(9999)
    entryPoint "sh", "-c", "java \$JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -jar /app.jar"
}

task buildImage(type: DockerBuildImage, dependsOn: createDockerfile) {
    inputDir = createDockerfile.destFile.parentFile
    tag = "${repository}/${jar.baseName}:${jar.version}"
}

task publishImage(type: DockerPushImage, dependsOn: buildImage) {
    imageName = "${repository}/${jar.baseName}"
    tag = "${jar.version}"
}
